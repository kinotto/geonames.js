{"version":3,"sources":["webpack://Geonames/webpack/universalModuleDefinition","webpack://Geonames/webpack/bootstrap","webpack://Geonames/./geonames.config.ts","webpack://Geonames/./geonames.ts"],"names":[],"mappings":"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","file":"geonames.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Geonames\"] = factory();\n\telse\n\t\troot[\"Geonames\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { GeonamesConfig } from './geonames.types'\n\nexport const baseParams: GeonamesConfig = {\n  encoding: 'JSON',\n  formatted: true,\n  lan: 'en',\n  style: 'full',\n  username: null,\n  token: null,\n}\n\nexport const baseUri = 'https://secure.geonames.org/'\nexport const baseUriCommercial = 'https://secure.geonames.net/'\n\nexport const geoNamesAPI = [\n  'astergdem',\n  'children',\n  'cities',\n  'contains',\n  'countryCode',\n  'countryInfo',\n  'countrySubdivision',\n  'earthquakes',\n  'extendedFindNearby',\n  'findNearby',\n  'findNearbyPlaceName',\n  'findNearbyPostalCodes',\n  'findNearbyStreets', //only USA\n  'findNearbyStreetsOSM',\n  'findNearByWeather',\n  'findNearbyWikipedia',\n  'findNearestAddress', //only USA\n  'findNearestIntersection', //only USA\n  'findNearestIntersectionOSM',\n  'findNearbyPOIsOSM',\n  'geocode', //only USA\n  'get',\n  'gtopo30',\n  'hierarchy',\n  'neighbourhood', //only USA\n  'neighbours',\n  'ocean',\n  'postalCodeCountryInfo',\n  'postalCodeLookup',\n  'postalCodeSearch',\n  'rssToGeo',\n  'search',\n  'siblings',\n  'srtm1',\n  'srtm3',\n  'timezone',\n  'weather',\n  'weatherIcao',\n  'wikipediaBoundingBox',\n  'wikipediaSearch'\n]\n","import * as pkg from '../package.json'\nimport { GeonamesConfig, GeonamesOptions } from './geonames.types'\nimport { baseParams, baseUri, baseUriCommercial, geoNamesAPI } from './geonames.config'\n\nexport class Geonames {\n  private config: GeonamesConfig\n\n  public readonly version: string = pkg.version\n  public readonly uri: string \n\n  constructor(readonly options: NonNullable<GeonamesOptions>) {\n    if (!options || !options.username) {\n      const errNoUsernameMessage =\n        \"you must provide a username, if you don't have one register on http://www.geonames.org/login\"\n      throw new Error(errNoUsernameMessage)\n    }\n    this.config = { ...baseParams, ...options }\n\n    const { username, token } = this.config\n    this.uri = token ? baseUriCommercial : baseUri\n\n    for (let apiName of geoNamesAPI) {\n      const fullApiName = `${this.uri}${apiName}${this.config.encoding}`\n      this[apiName] = async (params: any) => {\n        params = new URLSearchParams({\n          username,\n          ...(token && {token}),\n          lang: this.config.lan,\n          ...params\n        }).toString()\n        const response = await fetch(`${fullApiName}?${params}`)\n        return response.json()\n      }\n    }\n  }\n}\n\nexport default Geonames\n"],"sourceRoot":""}