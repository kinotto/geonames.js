!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("url"),require("https")):"function"==typeof define&&define.amd?define(["url","https"],t):"object"==typeof exports?exports.Geonames=t(require("url"),require("https")):e.Geonames=t(e.url,e.https)}(this,(function(e,t){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/",o(o.s=0)}([function(e,t,o){e.exports=o(1)},function(e,t,o){"use strict";(function(e){var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const n=r(o(3)),s=o(4);if("undefined"==typeof URLSearchParams&&(e.URLSearchParams=o(5).URLSearchParams),"function"!=typeof fetch){const t=o(6);e.fetch=async e=>new Promise((o,r)=>{const n=t.request(e,e=>{if(e.statusCode<200||e.statusCode>=300)return r(new Error("Status Code: "+e.statusCode));let t="";e.on("data",e=>{t+=e}),e.on("end",()=>o(JSON.parse(t)))});n.on("error",r),n.end()})}class i{constructor(e){if(this.options=e,this.version=n.version,!e||!e.username)throw new Error("you must provide a username, if you don't have one register on http://www.geonames.org/login");this.config=Object.assign({},s.baseParams,e);const{username:t,token:o}=this.config;this.uri=o?s.baseUriCommercial:s.baseUri;for(let e of s.geoNamesAPI){const r=`${this.uri}${e}${this.config.encoding}`;this[e]=async e=>{e=new URLSearchParams(Object.assign({username:t},o&&{token:o},{lang:this.config.lan},e)).toString();const n=await fetch(`${r}?${e}`);if("function"!=typeof n.json)return n;if(n.statusCode<200||n.statusCode>=300)throw new Error("Status Code:"+(n.statusText||n.status));return n.json()}}}}t.Geonames=i,t.default=i}).call(this,o(2))},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o},function(e){e.exports=JSON.parse('{"name":"geonames.js","version":"2.3.0","homepage":"https://github.com/kinotto/geonames.js","description":"REST api to fetch countries, regions, cities etc. A flexible library for browser and node.js usage built on top http://www.geonames.org/","main":"dist/geonames.min.js","scripts":{"test":"mocha ./spec/test-server.js --timeout 50000","test-debug":"mocha ./spec/test-server.js --nolazy --inspect-brk=9229","coverage":"nyc npm test && nyc report --reporter=text-lcov | coveralls","build":"cross-env NODE_ENV=production webpack","build:dev":"cross-env NODE_ENV=development webpack","build:all":"rm -rf dist/* && npm run build && npm run build:dev"},"repository":"git+https://github.com/kinotto/geonames.js.git","author":"Karim Abdelcadir <kinotto88@yahoo.it>","contributors":[{"name":"Vito Macchia","email":"vito.macchia@gmail.com"},{"name":"Xavi Torell√≥","email":"info@xaviertorello.cat"}],"license":"MIT","bugs":{"url":"https://github.com/kinotto/geonames.js/issues"},"dependencies":{},"devDependencies":{"babel-core":"^6.26.3","babel-loader":"^7.1.5","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-preset-env":"^1.7.0","chai":"^3.5.0","coveralls":"^2.12.0","cross-env":"^5.2.0","mocha":"^3.2.0","nyc":"^10.1.2","opener":"^1.4.1","require-dir":"^0.3.1","sinon":"^1.17.7","sinon-chai":"^2.8.0","tiny-lr":"^0.2.1","ts-loader":"^4.4.2","typescript":"^2.9.2","uglifyjs-webpack-plugin":"^1.2.7","webpack":"^4.16.2","webpack-cli":"^3.1.0","webpack-node-externals":"^1.7.2"}}')},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.baseParams={encoding:"JSON",formatted:!0,lan:"en",style:"full",username:null,token:null},t.baseUri="https://secure.geonames.org/",t.baseUriCommercial="https://secure.geonames.net/",t.geoNamesAPI=["astergdem","children","cities","contains","countryCode","countryInfo","countrySubdivision","earthquakes","extendedFindNearby","findNearby","findNearbyPlaceName","findNearbyPostalCodes","findNearbyStreets","findNearbyStreetsOSM","findNearByWeather","findNearbyWikipedia","findNearestAddress","findNearestIntersection","findNearestIntersectionOSM","findNearbyPOIsOSM","geocode","get","gtopo30","hierarchy","neighbourhood","neighbours","ocean","postalCodeCountryInfo","postalCodeLookup","postalCodeSearch","rssToGeo","search","siblings","srtm1","srtm3","timezone","weather","weatherIcao","wikipediaBoundingBox","wikipediaSearch"]},function(t,o){t.exports=e},function(e,o){e.exports=t}]).Geonames}));