!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("axios")):"function"==typeof define&&define.amd?define(["axios"],t):"object"==typeof exports?exports.Geonames=t(require("axios")):e.Geonames=t(e.axios)}(this,function(e){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/",o(o.s=0)}([function(e,t,o){e.exports=o(1)},function(e,t,o){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(2)),s=r(o(3)),a=o(4);class c{constructor(e){if(this.options=e,this.version=i.version,!e||!e.username)throw new Error("you must provide a username, if you don't have one register on http://www.geonames.org/login");this.config=Object.assign({},a.baseParams,e);const t=s.default.create({baseURL:a.baseUri});for(let e of a.geoNamesAPI){const o=`${e}${this.config.encoding}`;this[e]=(async e=>(await t.get(o,{params:Object.assign({username:this.config.username,lang:this.config.lan},e)})).data)}}}t.Geonames=c,t.default=c},function(e){e.exports={name:"geonames.js",version:"2.1.0",homepage:"https://github.com/kinotto/geonames.js",description:"REST api to fetch countries, regions, cities etc. A flexible library for browser and node.js usage built on top http://www.geonames.org/",main:"dist/geonames.min.js",scripts:{test:"mocha ./spec/test-server.js --timeout 50000","test-debug":"mocha ./spec/test-server.js --nolazy --inspect-brk=9229",coverage:"nyc npm test && nyc report --reporter=text-lcov | coveralls",build:"cross-env NODE_ENV=production webpack","build-dev":"cross-env NODE_ENV=development webpack","build:all":"rm -rf dist/* && npm run build && npm run build-dev"},repository:"git+https://github.com/kinotto/geonames.js.git",author:"Karim Abdelcadir <kinotto88@yahoo.it>",contributors:[{name:"Vito Macchia",email:"vito.macchia@gmail.com"}],license:"MIT",bugs:{url:"https://github.com/kinotto/geonames.js/issues"},dependencies:{axios:"^0.18.0"},devDependencies:{"babel-core":"^6.26.3","babel-loader":"^7.1.5","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-preset-env":"^1.7.0",chai:"^3.5.0",coveralls:"^2.12.0","cross-env":"^5.2.0",mocha:"^3.2.0",nyc:"^10.1.2",opener:"^1.4.1","require-dir":"^0.3.1",sinon:"^1.17.7","sinon-chai":"^2.8.0","tiny-lr":"^0.2.1","ts-loader":"^4.4.2",typescript:"^2.9.2","uglifyjs-webpack-plugin":"^1.2.7",webpack:"^4.16.2","webpack-cli":"^3.1.0","webpack-node-externals":"^1.7.2"}}},function(t,o){t.exports=e},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.baseParams={encoding:"JSON",formatted:!0,lan:"en",style:"full",username:null},t.baseUri="https://secure.geonames.org/",t.geoNamesAPI=["astergdem","children","cities","contains","countryCode","countryInfo","countrySubdivision","earthquakes","extendedFindNearby","findNearby","findNearbyPlaceName","findNearbyPostalCodes","findNearbyStreets","findNearbyStreetsOSM","findNearByWeather","findNearbyWikipedia","findNearestAddress","findNearestIntersection","findNearestIntersectionOSM","findNearbyPOIsOSM","geocode","get","gtopo30","hierarchy","neighbourhood","neighbours","ocean","postalCodeCountryInfo","postalCodeLookup","postalCodeSearch","rssToGeo","search","siblings","srtm1","srtm3","timezone","weather","weatherIcao","wikipediaBoundingBox","wikipediaSearch"]}]).Geonames});